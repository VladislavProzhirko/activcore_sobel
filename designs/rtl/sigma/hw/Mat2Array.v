// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Mat2Array (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_data_stream_V_dout,
        img_data_stream_V_empty_n,
        img_data_stream_V_read,
        fb_address0,
        fb_ce0,
        fb_we0,
        fb_d0,
        fb_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] img_data_stream_V_dout;
input   img_data_stream_V_empty_n;
output   img_data_stream_V_read;
output  [4:0] fb_address0;
output   fb_ce0;
output   fb_we0;
output  [31:0] fb_d0;
input  [31:0] fb_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_data_stream_V_read;
reg[4:0] fb_address0;
reg fb_ce0;
reg fb_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_data_stream_V_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln240_fu_119_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] row_V_fu_125_p2;
reg   [3:0] row_V_reg_362;
wire   [6:0] shl_ln_fu_131_p3;
reg   [6:0] shl_ln_reg_367;
wire   [5:0] zext_ln241_fu_147_p1;
reg   [5:0] zext_ln241_reg_372;
wire   [1:0] trunc_ln253_1_fu_155_p3;
reg   [1:0] trunc_ln253_1_reg_377;
wire   [3:0] col_V_fu_169_p2;
reg   [3:0] col_V_reg_385;
wire    ap_CS_fsm_state3;
reg   [4:0] fb_addr_reg_390;
wire   [0:0] icmp_ln241_fu_163_p2;
wire   [0:0] icmp_ln253_fu_231_p2;
reg   [0:0] icmp_ln253_reg_395;
wire   [5:0] zext_ln253_3_fu_237_p1;
reg   [5:0] zext_ln253_3_reg_401;
wire   [31:0] and_ln253_fu_287_p2;
reg   [31:0] and_ln253_reg_407;
reg   [3:0] t_V_reg_97;
reg    ap_block_state1;
wire    ap_CS_fsm_state5;
reg   [3:0] t_V_1_reg_108;
wire   [63:0] zext_ln253_1_fu_203_p1;
wire   [4:0] shl_ln1352_1_fu_139_p3;
wire   [0:0] trunc_ln253_fu_151_p1;
wire   [5:0] zext_ln253_fu_175_p1;
wire   [5:0] add_ln253_fu_179_p2;
wire   [6:0] zext_ln253_2_fu_184_p1;
wire   [6:0] add_ln253_1_fu_188_p2;
wire   [4:0] lshr_ln_fu_193_p4;
wire   [1:0] trunc_ln253_2_fu_208_p1;
wire   [1:0] add_ln253_2_fu_212_p2;
wire   [4:0] shl_ln1_fu_217_p3;
wire   [4:0] empty_60_fu_225_p2;
wire   [5:0] zext_ln253_4_fu_241_p1;
wire   [5:0] select_ln253_fu_245_p3;
wire   [5:0] select_ln253_1_fu_253_p3;
wire   [5:0] xor_ln253_1_fu_261_p2;
wire   [31:0] zext_ln253_7_fu_267_p1;
wire   [31:0] zext_ln253_8_fu_271_p1;
wire   [31:0] shl_ln253_1_fu_275_p2;
wire   [31:0] lshr_ln253_fu_281_p2;
wire   [5:0] xor_ln253_fu_297_p2;
wire   [5:0] select_ln253_2_fu_302_p3;
wire   [31:0] zext_ln253_5_fu_293_p1;
wire   [31:0] zext_ln253_6_fu_308_p1;
wire   [31:0] shl_ln253_fu_312_p2;
reg   [31:0] tmp_fu_318_p4;
wire   [31:0] xor_ln253_2_fu_335_p2;
wire   [31:0] select_ln253_3_fu_328_p3;
wire   [31:0] and_ln253_1_fu_340_p2;
wire   [31:0] and_ln253_2_fu_346_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln240_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((img_data_stream_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_1_reg_108 <= col_V_reg_385;
    end else if (((icmp_ln240_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_108 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        t_V_reg_97 <= row_V_reg_362;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_97 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln241_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        and_ln253_reg_407 <= and_ln253_fu_287_p2;
        fb_addr_reg_390 <= zext_ln253_1_fu_203_p1;
        icmp_ln253_reg_395 <= icmp_ln253_fu_231_p2;
        zext_ln253_3_reg_401[4 : 3] <= zext_ln253_3_fu_237_p1[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        col_V_reg_385 <= col_V_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_V_reg_362 <= row_V_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln240_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_367[6 : 3] <= shl_ln_fu_131_p3[6 : 3];
        trunc_ln253_1_reg_377[1] <= trunc_ln253_1_fu_155_p3[1];
        zext_ln241_reg_372[4 : 1] <= zext_ln241_fu_147_p1[4 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln240_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln240_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fb_address0 = fb_addr_reg_390;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fb_address0 = zext_ln253_1_fu_203_p1;
    end else begin
        fb_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((img_data_stream_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        fb_ce0 = 1'b1;
    end else begin
        fb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((img_data_stream_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        fb_we0 = 1'b1;
    end else begin
        fb_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_data_stream_V_blk_n = img_data_stream_V_empty_n;
    end else begin
        img_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((img_data_stream_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        img_data_stream_V_read = 1'b1;
    end else begin
        img_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln240_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln241_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((img_data_stream_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln253_1_fu_188_p2 = (zext_ln253_2_fu_184_p1 + shl_ln_reg_367);

assign add_ln253_2_fu_212_p2 = (trunc_ln253_1_reg_377 + trunc_ln253_2_fu_208_p1);

assign add_ln253_fu_179_p2 = (zext_ln241_reg_372 + zext_ln253_fu_175_p1);

assign and_ln253_1_fu_340_p2 = (xor_ln253_2_fu_335_p2 & fb_q0);

assign and_ln253_2_fu_346_p2 = (select_ln253_3_fu_328_p3 & and_ln253_reg_407);

assign and_ln253_fu_287_p2 = (shl_ln253_1_fu_275_p2 & lshr_ln253_fu_281_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign col_V_fu_169_p2 = (t_V_1_reg_108 + 4'd1);

assign empty_60_fu_225_p2 = (shl_ln1_fu_217_p3 | 5'd7);

assign fb_d0 = (and_ln253_2_fu_346_p2 | and_ln253_1_fu_340_p2);

assign icmp_ln240_fu_119_p2 = ((t_V_reg_97 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_163_p2 = ((t_V_1_reg_108 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln253_fu_231_p2 = ((shl_ln1_fu_217_p3 > empty_60_fu_225_p2) ? 1'b1 : 1'b0);

assign lshr_ln253_fu_281_p2 = 32'd4294967295 >> zext_ln253_8_fu_271_p1;

assign lshr_ln_fu_193_p4 = {{add_ln253_1_fu_188_p2[6:2]}};

assign row_V_fu_125_p2 = (t_V_reg_97 + 4'd1);

assign select_ln253_1_fu_253_p3 = ((icmp_ln253_fu_231_p2[0:0] === 1'b1) ? zext_ln253_4_fu_241_p1 : zext_ln253_3_fu_237_p1);

assign select_ln253_2_fu_302_p3 = ((icmp_ln253_reg_395[0:0] === 1'b1) ? xor_ln253_fu_297_p2 : zext_ln253_3_reg_401);

assign select_ln253_3_fu_328_p3 = ((icmp_ln253_reg_395[0:0] === 1'b1) ? tmp_fu_318_p4 : shl_ln253_fu_312_p2);

assign select_ln253_fu_245_p3 = ((icmp_ln253_fu_231_p2[0:0] === 1'b1) ? zext_ln253_3_fu_237_p1 : zext_ln253_4_fu_241_p1);

assign shl_ln1352_1_fu_139_p3 = {{t_V_reg_97}, {1'd0}};

assign shl_ln1_fu_217_p3 = {{add_ln253_2_fu_212_p2}, {3'd0}};

assign shl_ln253_1_fu_275_p2 = 32'd4294967295 << zext_ln253_7_fu_267_p1;

assign shl_ln253_fu_312_p2 = zext_ln253_5_fu_293_p1 << zext_ln253_6_fu_308_p1;

assign shl_ln_fu_131_p3 = {{t_V_reg_97}, {3'd0}};

integer ap_tvar_int_0;

always @ (shl_ln253_fu_312_p2) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_fu_318_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_318_p4[ap_tvar_int_0] = shl_ln253_fu_312_p2[31 - ap_tvar_int_0];
        end
    end
end

assign trunc_ln253_1_fu_155_p3 = {{trunc_ln253_fu_151_p1}, {1'd0}};

assign trunc_ln253_2_fu_208_p1 = t_V_1_reg_108[1:0];

assign trunc_ln253_fu_151_p1 = t_V_reg_97[0:0];

assign xor_ln253_1_fu_261_p2 = (select_ln253_fu_245_p3 ^ 6'd31);

assign xor_ln253_2_fu_335_p2 = (32'd4294967295 ^ and_ln253_reg_407);

assign xor_ln253_fu_297_p2 = (zext_ln253_3_reg_401 ^ 6'd31);

assign zext_ln241_fu_147_p1 = shl_ln1352_1_fu_139_p3;

assign zext_ln253_1_fu_203_p1 = lshr_ln_fu_193_p4;

assign zext_ln253_2_fu_184_p1 = add_ln253_fu_179_p2;

assign zext_ln253_3_fu_237_p1 = shl_ln1_fu_217_p3;

assign zext_ln253_4_fu_241_p1 = empty_60_fu_225_p2;

assign zext_ln253_5_fu_293_p1 = img_data_stream_V_dout;

assign zext_ln253_6_fu_308_p1 = select_ln253_2_fu_302_p3;

assign zext_ln253_7_fu_267_p1 = select_ln253_1_fu_253_p3;

assign zext_ln253_8_fu_271_p1 = xor_ln253_1_fu_261_p2;

assign zext_ln253_fu_175_p1 = t_V_1_reg_108;

always @ (posedge ap_clk) begin
    shl_ln_reg_367[2:0] <= 3'b000;
    zext_ln241_reg_372[0] <= 1'b0;
    zext_ln241_reg_372[5] <= 1'b0;
    trunc_ln253_1_reg_377[0] <= 1'b0;
    zext_ln253_3_reg_401[2:0] <= 3'b000;
    zext_ln253_3_reg_401[5] <= 1'b0;
end

endmodule //Mat2Array
