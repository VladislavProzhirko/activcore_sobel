// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Array2Mat (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        fb_address0,
        fb_ce0,
        fb_q0,
        img_rows_V_dout,
        img_rows_V_empty_n,
        img_rows_V_read,
        img_cols_V_dout,
        img_cols_V_empty_n,
        img_cols_V_read,
        img_data_stream_V_din,
        img_data_stream_V_full_n,
        img_data_stream_V_write,
        img_rows_V_out_din,
        img_rows_V_out_full_n,
        img_rows_V_out_write,
        img_cols_V_out_din,
        img_cols_V_out_full_n,
        img_cols_V_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [4:0] fb_address0;
output   fb_ce0;
input  [31:0] fb_q0;
input  [4:0] img_rows_V_dout;
input   img_rows_V_empty_n;
output   img_rows_V_read;
input  [4:0] img_cols_V_dout;
input   img_cols_V_empty_n;
output   img_cols_V_read;
output  [7:0] img_data_stream_V_din;
input   img_data_stream_V_full_n;
output   img_data_stream_V_write;
output  [4:0] img_rows_V_out_din;
input   img_rows_V_out_full_n;
output   img_rows_V_out_write;
output  [4:0] img_cols_V_out_din;
input   img_cols_V_out_full_n;
output   img_cols_V_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg fb_ce0;
reg img_rows_V_read;
reg img_cols_V_read;
reg img_data_stream_V_write;
reg img_rows_V_out_write;
reg img_cols_V_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    img_rows_V_blk_n;
reg    img_cols_V_blk_n;
reg    img_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln175_reg_409;
reg   [0:0] icmp_ln175_reg_409_pp0_iter1_reg;
reg    img_rows_V_out_blk_n;
reg    img_cols_V_out_blk_n;
reg   [31:0] t_V_3_reg_145;
wire  signed [31:0] rows_V_fu_156_p1;
reg  signed [31:0] rows_V_reg_375;
reg    ap_block_state1;
wire  signed [31:0] cols_V_fu_160_p1;
reg  signed [31:0] cols_V_reg_380;
wire   [0:0] icmp_ln174_fu_164_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] row_V_fu_169_p2;
reg   [31:0] row_V_reg_389;
wire   [7:0] shl_ln_fu_179_p3;
reg   [7:0] shl_ln_reg_394;
wire   [7:0] trunc_ln1352_1_fu_191_p3;
reg   [7:0] trunc_ln1352_1_reg_399;
wire   [1:0] tmp_s_fu_203_p3;
reg   [1:0] tmp_s_reg_404;
wire   [0:0] icmp_ln175_fu_211_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] col_V_fu_216_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] trunc_ln178_2_i1_i1_fu_255_p2;
reg   [1:0] trunc_ln178_2_i1_i1_reg_423;
wire   [7:0] fb_pix_fu_371_p1;
reg   [7:0] fb_pix_reg_428;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] t_V_reg_134;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln178_fu_246_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [4:0] rows_V_fu_156_p0;
wire  signed [4:0] cols_V_fu_160_p0;
wire   [4:0] trunc_ln1352_fu_175_p1;
wire   [6:0] trunc_ln1352_2_fu_187_p1;
wire   [0:0] empty_76_fu_199_p1;
wire   [7:0] trunc_ln178_fu_222_p1;
wire   [7:0] add_ln178_fu_226_p2;
wire   [7:0] add_ln178_1_fu_231_p2;
wire   [5:0] lshr_ln_fu_236_p4;
wire   [1:0] empty_78_fu_251_p1;
wire   [4:0] tmp_1_fu_260_p3;
wire   [4:0] empty_79_fu_267_p2;
wire   [5:0] zext_ln178_1_fu_279_p1;
wire   [5:0] zext_ln178_2_fu_283_p1;
wire   [0:0] icmp_ln178_fu_273_p2;
wire   [5:0] sub_ln178_fu_297_p2;
wire   [5:0] sub_ln178_1_fu_309_p2;
reg   [31:0] tmp_fu_287_p4;
wire   [5:0] xor_ln178_fu_303_p2;
wire   [5:0] select_ln178_fu_315_p3;
wire   [5:0] select_ln178_2_fu_331_p3;
wire   [5:0] sub_ln178_2_fu_339_p2;
wire   [31:0] select_ln178_1_fu_323_p3;
wire   [31:0] zext_ln178_3_fu_345_p1;
wire   [31:0] zext_ln178_4_fu_349_p1;
wire   [31:0] lshr_ln178_fu_353_p2;
wire   [31:0] lshr_ln178_1_fu_359_p2;
wire   [31:0] and_ln178_fu_365_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_164_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln174_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln174_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln175_fu_211_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_3_reg_145 <= col_V_fu_216_p2;
    end else if (((icmp_ln174_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_3_reg_145 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_V_reg_134 <= row_V_reg_389;
    end else if ((~((img_cols_V_out_full_n == 1'b0) | (img_rows_V_out_full_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_134 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((img_cols_V_out_full_n == 1'b0) | (img_rows_V_out_full_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_V_reg_380 <= cols_V_fu_160_p1;
        rows_V_reg_375 <= rows_V_fu_156_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln175_reg_409 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fb_pix_reg_428 <= fb_pix_fu_371_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln175_reg_409 <= icmp_ln175_fu_211_p2;
        icmp_ln175_reg_409_pp0_iter1_reg <= icmp_ln175_reg_409;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_V_reg_389 <= row_V_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln174_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_394[7 : 3] <= shl_ln_fu_179_p3[7 : 3];
        tmp_s_reg_404[1] <= tmp_s_fu_203_p3[1];
        trunc_ln1352_1_reg_399[7 : 1] <= trunc_ln1352_1_fu_191_p3[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln175_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln178_2_i1_i1_reg_423 <= trunc_ln178_2_i1_i1_fu_255_p2;
    end
end

always @ (*) begin
    if ((icmp_ln175_fu_211_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_164_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fb_ce0 = 1'b1;
    end else begin
        fb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_V_blk_n = img_cols_V_empty_n;
    end else begin
        img_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_V_out_blk_n = img_cols_V_out_full_n;
    end else begin
        img_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_cols_V_out_full_n == 1'b0) | (img_rows_V_out_full_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_V_out_write = 1'b1;
    end else begin
        img_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((img_cols_V_out_full_n == 1'b0) | (img_rows_V_out_full_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_V_read = 1'b1;
    end else begin
        img_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln175_reg_409_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        img_data_stream_V_blk_n = img_data_stream_V_full_n;
    end else begin
        img_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln175_reg_409_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_data_stream_V_write = 1'b1;
    end else begin
        img_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_rows_V_blk_n = img_rows_V_empty_n;
    end else begin
        img_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_rows_V_out_blk_n = img_rows_V_out_full_n;
    end else begin
        img_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_cols_V_out_full_n == 1'b0) | (img_rows_V_out_full_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_rows_V_out_write = 1'b1;
    end else begin
        img_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((img_cols_V_out_full_n == 1'b0) | (img_rows_V_out_full_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_rows_V_read = 1'b1;
    end else begin
        img_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_164_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((img_cols_V_out_full_n == 1'b0) | (img_rows_V_out_full_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_164_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln175_fu_211_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln175_fu_211_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln178_1_fu_231_p2 = (add_ln178_fu_226_p2 + trunc_ln1352_1_reg_399);

assign add_ln178_fu_226_p2 = (shl_ln_reg_394 + trunc_ln178_fu_222_p1);

assign and_ln178_fu_365_p2 = (lshr_ln178_fu_353_p2 & lshr_ln178_1_fu_359_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln175_reg_409_pp0_iter1_reg == 1'd0) & (img_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln175_reg_409_pp0_iter1_reg == 1'd0) & (img_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln175_reg_409_pp0_iter1_reg == 1'd0) & (img_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((img_cols_V_out_full_n == 1'b0) | (img_rows_V_out_full_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (img_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((icmp_ln175_reg_409_pp0_iter1_reg == 1'd0) & (img_data_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign col_V_fu_216_p2 = (t_V_3_reg_145 + 32'd1);

assign cols_V_fu_160_p0 = img_cols_V_dout;

assign cols_V_fu_160_p1 = cols_V_fu_160_p0;

assign empty_76_fu_199_p1 = t_V_reg_134[0:0];

assign empty_78_fu_251_p1 = t_V_3_reg_145[1:0];

assign empty_79_fu_267_p2 = (tmp_1_fu_260_p3 | 5'd7);

assign fb_address0 = zext_ln178_fu_246_p1;

assign fb_pix_fu_371_p1 = and_ln178_fu_365_p2[7:0];

assign icmp_ln174_fu_164_p2 = ((t_V_reg_134 == rows_V_reg_375) ? 1'b1 : 1'b0);

assign icmp_ln175_fu_211_p2 = ((t_V_3_reg_145 == cols_V_reg_380) ? 1'b1 : 1'b0);

assign icmp_ln178_fu_273_p2 = ((tmp_1_fu_260_p3 > empty_79_fu_267_p2) ? 1'b1 : 1'b0);

assign img_cols_V_out_din = img_cols_V_dout;

assign img_data_stream_V_din = fb_pix_reg_428;

assign img_rows_V_out_din = img_rows_V_dout;

assign lshr_ln178_1_fu_359_p2 = 32'd4294967295 >> zext_ln178_4_fu_349_p1;

assign lshr_ln178_fu_353_p2 = select_ln178_1_fu_323_p3 >> zext_ln178_3_fu_345_p1;

assign lshr_ln_fu_236_p4 = {{add_ln178_1_fu_231_p2[7:2]}};

assign row_V_fu_169_p2 = (t_V_reg_134 + 32'd1);

assign rows_V_fu_156_p0 = img_rows_V_dout;

assign rows_V_fu_156_p1 = rows_V_fu_156_p0;

assign select_ln178_1_fu_323_p3 = ((icmp_ln178_fu_273_p2[0:0] === 1'b1) ? tmp_fu_287_p4 : fb_q0);

assign select_ln178_2_fu_331_p3 = ((icmp_ln178_fu_273_p2[0:0] === 1'b1) ? xor_ln178_fu_303_p2 : zext_ln178_1_fu_279_p1);

assign select_ln178_fu_315_p3 = ((icmp_ln178_fu_273_p2[0:0] === 1'b1) ? sub_ln178_fu_297_p2 : sub_ln178_1_fu_309_p2);

assign shl_ln_fu_179_p3 = {{trunc_ln1352_fu_175_p1}, {3'd0}};

assign start_out = real_start;

assign sub_ln178_1_fu_309_p2 = (zext_ln178_2_fu_283_p1 - zext_ln178_1_fu_279_p1);

assign sub_ln178_2_fu_339_p2 = (6'd31 - select_ln178_fu_315_p3);

assign sub_ln178_fu_297_p2 = (zext_ln178_1_fu_279_p1 - zext_ln178_2_fu_283_p1);

assign tmp_1_fu_260_p3 = {{trunc_ln178_2_i1_i1_reg_423}, {3'd0}};

integer ap_tvar_int_0;

always @ (fb_q0) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_fu_287_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_287_p4[ap_tvar_int_0] = fb_q0[31 - ap_tvar_int_0];
        end
    end
end

assign tmp_s_fu_203_p3 = {{empty_76_fu_199_p1}, {1'd0}};

assign trunc_ln1352_1_fu_191_p3 = {{trunc_ln1352_2_fu_187_p1}, {1'd0}};

assign trunc_ln1352_2_fu_187_p1 = t_V_reg_134[6:0];

assign trunc_ln1352_fu_175_p1 = t_V_reg_134[4:0];

assign trunc_ln178_2_i1_i1_fu_255_p2 = (tmp_s_reg_404 + empty_78_fu_251_p1);

assign trunc_ln178_fu_222_p1 = t_V_3_reg_145[7:0];

assign xor_ln178_fu_303_p2 = (zext_ln178_1_fu_279_p1 ^ 6'd31);

assign zext_ln178_1_fu_279_p1 = tmp_1_fu_260_p3;

assign zext_ln178_2_fu_283_p1 = empty_79_fu_267_p2;

assign zext_ln178_3_fu_345_p1 = select_ln178_2_fu_331_p3;

assign zext_ln178_4_fu_349_p1 = sub_ln178_2_fu_339_p2;

assign zext_ln178_fu_246_p1 = lshr_ln_fu_236_p4;

always @ (posedge ap_clk) begin
    shl_ln_reg_394[2:0] <= 3'b000;
    trunc_ln1352_1_reg_399[0] <= 1'b0;
    tmp_s_reg_404[0] <= 1'b0;
end

endmodule //Array2Mat
